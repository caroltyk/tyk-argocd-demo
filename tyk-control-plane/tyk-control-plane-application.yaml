apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: tyk-control-plane
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "40"
  finalizers:
    # The default behaviour is foreground cascading deletion
    - resources-finalizer.argocd.argoproj.io
    # Alternatively, you can use background cascading deletion
    # - resources-finalizer.argocd.argoproj.io/background
spec:
  destination:
    server: https://kubernetes.default.svc
    namespace: tyk-cp
  project: infrastructure
  source:
    chart: tyk-control-plane
    repoURL: https://helm.tyk.io/public/helm/charts
    targetRevision: 1.5.0
    helm:
      valuesObject:
        global:
          components:
            bootstrap: false
            pump: false
            devPortal: false
            operator: false
          adminUser:
            useSecretName: admin-secrets
          secrets:
            useSecretName: my-secrets
          redis:
            addrs:
              - redis-cp-master:6379
            passSecret:
              name: redis-password-secret
              keyName: redis-password
          postgres:
            connectionStringSecret:
              name: postgres-secrets
              keyName: postgresUrl
          mdcbSynchronizer:
            enabled: true
        tyk-dashboard:
          dashboard:
            hostName: tyk-cp-dashboard.org
            ingress:
              enabled: "true"
              className: nginx
              annotations:
                cert-manager.io/issuer: letsencrypt-nginx
              hosts:
                - host: tyk-cp-dashboard-159.65.212.135.nip.io
                  paths:
                    - path: /
                      pathType: ImplementationSpecific
              tls:
                - secretName: letsencrypt-nginx
                  hosts:
                    - "tyk-cp-dashboard-159.65.212.135.nip.io"
            tib:
              enabled: "true"
            extraEnvs:
              - name: TYK_DB_SECURITY_OPENPOLICY_ENABLED
                value: "true"
              - name: TYK_DB_SECURITY_OPENPOLICY_ENABLEAPI
                value: "true"
              - name: TYK_DB_SECURITY_ALLOWADMINRESETPASSWORD
                value: "true"
        tyk-bootstrap:
          bootstrap:
            podLabels:
              preInstallPodLabels:
                sidecar.istio.io/inject: "false"
              postInstallPodLabels:
                sidecar.istio.io/inject: "false"
              preDeletePodLabels:
                sidecar.istio.io/inject: "false"
        tyk-mdcb:
          mdcb:
            useSecretName: mdcb-secrets
            tls:
              # enables ssl for mdcb
              useSSL: "true"
              
              # the path to where the keys will be mounted in the pod
              certificatesMountPath: "/etc/certs"
        
              # location to pem encoded private key
              certificateKeyFile: "/etc/certs/tls.key"
        
              # location to pem encoded certificate
              certificateCertFile: "/etc/certs/tls.crt"
        
              # the name of the secret
              secretName: "mdcb-tls-secret"
        
              # the name of the volume
              volumeName: "mdcb-tls-secret-volume"
        tyk-dev-portal:
          useSecretName: "tyk-dev-portal-secret"
          hostName: tyk-cp-dev-portal.org
          ingress:
            enabled: "true"
            className: nginx
            annotations:
              cert-manager.io/issuer: letsencrypt-nginx
            hosts:
              - host: tyk-cp-dev-portal-159.65.212.135.nip.io
                paths:
                  - path: /
                    pathType: ImplementationSpecific
            tls:
              - secretName: letsencrypt-nginx
                hosts:
                  - "tyk-cp-dev-portal-159.65.212.135.nip.io"
  syncPolicy:
    syncOptions:
    - CreateNamespace=true
    automated:
      prune: false